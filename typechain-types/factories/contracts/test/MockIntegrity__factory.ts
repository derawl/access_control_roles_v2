/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockIntegrity,
  MockIntegrityInterface,
} from "../../../contracts/test/MockIntegrity";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "parent",
            type: "uint8",
          },
          {
            internalType: "enum ParameterType",
            name: "paramType",
            type: "uint8",
          },
          {
            internalType: "enum Operator",
            name: "operator",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "compValue",
            type: "bytes",
          },
        ],
        internalType: "struct ConditionFlat[]",
        name: "conditions",
        type: "tuple[]",
      },
    ],
    name: "enforce",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506103f48061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806333a2616f1461002d575b5f80fd5b61004061003b366004610195565b610042565b005b60405163783a904760e01b815273__$2cd9b773a3c3e0b461f7ad54b09f46e6ae$__9063783a9047906100799084906004016102dc565b5f6040518083038186803b15801561008f575f80fd5b505af41580156100a1573d5f803e3d5ffd5b5050505050565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff811182821017156100df576100df6100a8565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561010e5761010e6100a8565b604052919050565b803560208110610124575f80fd5b919050565b5f82601f830112610138575f80fd5b813567ffffffffffffffff811115610152576101526100a8565b610165601f8201601f19166020016100e5565b818152846020838601011115610179575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60208083850312156101a6575f80fd5b823567ffffffffffffffff808211156101bd575f80fd5b818501915085601f8301126101d0575f80fd5b8135818111156101e2576101e26100a8565b8060051b6101f18582016100e5565b918252838101850191858101908984111561020a575f80fd5b86860192505b838310156102bb57823585811115610227575f8081fd5b86016080818c03601f190181131561023e575f8081fd5b6102466100bc565b8983013560ff81168114610259575f8081fd5b81526040838101356007811061026e575f8081fd5b828c0152606061027f858201610116565b83830152928401359289841115610297575f91508182fd5b6102a58f8d86880101610129565b9083015250845250509186019190860190610210565b9998505050505050505050565b634e487b7160e01b5f52602160045260245ffd5b5f6020808301818452808551808352604092508286019150828160051b8701018488015f805b848110156103af57603f198a85030186528251608060ff82511686528982015160078110610332576103326102c8565b868b0152818901518a8110610349576103496102c8565b868a0152606091820151918601819052815190860181905283905b80821015610382578282018b015187830160a00152908a0190610364565b86810160a0908101869052988b0198601f909101601f191690960190950194505091870191600101610302565b5091999850505050505050505056fea2646970667358221220c9323185978e789007a325a20d1c29ec2d7f00798eec05aa451f073d573e979c64736f6c63430008150033";

type MockIntegrityConstructorParams =
  | [linkLibraryAddresses: MockIntegrityLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockIntegrityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockIntegrity__factory extends ContractFactory {
  constructor(...args: MockIntegrityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockIntegrity__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockIntegrityLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$2cd9b773a3c3e0b461f7ad54b09f46e6ae\\$__", "g"),
      linkLibraryAddresses["contracts/Integrity.sol:Integrity"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockIntegrity> {
    return super.deploy(overrides || {}) as Promise<MockIntegrity>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockIntegrity {
    return super.attach(address) as MockIntegrity;
  }
  override connect(signer: Signer): MockIntegrity__factory {
    return super.connect(signer) as MockIntegrity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIntegrityInterface {
    return new utils.Interface(_abi) as MockIntegrityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockIntegrity {
    return new Contract(address, _abi, signerOrProvider) as MockIntegrity;
  }
}

export interface MockIntegrityLibraryAddresses {
  ["contracts/Integrity.sol:Integrity"]: string;
}
