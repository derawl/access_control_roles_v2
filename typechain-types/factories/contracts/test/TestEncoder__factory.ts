/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestEncoder,
  TestEncoderInterface,
} from "../../../contracts/test/TestEncoder";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "dynamic",
            type: "bytes",
          },
        ],
        internalType: "struct TestEncoder._DynamicTuple",
        name: "",
        type: "tuple",
      },
    ],
    name: "_dynamicTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "dynamic",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "_static",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "dynamic32",
            type: "uint256[]",
          },
        ],
        internalType: "struct TestEncoder.DynamicTuple[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "arrayDynamicTupleItems",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "b",
            type: "address",
          },
        ],
        internalType: "struct TestEncoder.StaticTuple[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "arrayStaticTupleItems",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "dynamic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes2[]",
        name: "",
        type: "bytes2[]",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "dynamic32DynamicStatic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    name: "dynamicArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes2[]",
        name: "",
        type: "bytes2[]",
      },
    ],
    name: "dynamicStaticDynamic32",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "dynamic",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "_static",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "dynamic32",
            type: "uint256[]",
          },
        ],
        internalType: "struct TestEncoder.DynamicTuple",
        name: "",
        type: "tuple",
      },
    ],
    name: "dynamicTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "b",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "a",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "b",
                type: "address",
              },
            ],
            internalType: "struct TestEncoder.StaticTuple[]",
            name: "c",
            type: "tuple[]",
          },
        ],
        internalType: "struct TestEncoder.DynamicTupleWithArray",
        name: "",
        type: "tuple",
      },
    ],
    name: "dynamicTupleWithNestedArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "a",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "a",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "b",
                type: "address",
              },
            ],
            internalType: "struct TestEncoder.StaticTuple",
            name: "b",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "c",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "dynamic",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "_static",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "dynamic32",
                type: "uint256[]",
              },
            ],
            internalType: "struct TestEncoder.DynamicTuple",
            name: "d",
            type: "tuple",
          },
        ],
        internalType: "struct TestEncoder.DynamicTupleWithDynamicTuple",
        name: "",
        type: "tuple",
      },
    ],
    name: "dynamicTupleWithNestedDynamicTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "b",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "a",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "b",
                type: "address",
              },
            ],
            internalType: "struct TestEncoder.StaticTuple",
            name: "c",
            type: "tuple",
          },
        ],
        internalType: "struct TestEncoder.DynamicTupleWithStaticTuple",
        name: "",
        type: "tuple",
      },
    ],
    name: "dynamicTupleWithNestedStaticTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "a",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "b",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "c",
            type: "bytes",
          },
          {
            internalType: "uint256[]",
            name: "d",
            type: "uint256[]",
          },
        ],
        internalType: "struct TestEncoder.MultiDynamicTuple",
        name: "",
        type: "tuple",
      },
    ],
    name: "multiDynamicTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "simple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "staticDynamic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    name: "staticDynamicDynamic32",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "staticFn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "b",
            type: "address",
          },
        ],
        internalType: "struct TestEncoder.StaticTuple",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "staticTuple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50610cf18061001d5f395ff3fe608060405234801561000f575f80fd5b50600436106100e7575f3560e01c8063a98ef1cf1161008f578063a98ef1cf14610164578063baf2eefa14610178578063c4192e4a14610186578063cc93bff914610194578063d3227572146101a2578063d543852a146101b0578063ea06cf67146101be578063ee6fafe0146101cc578063fde07f12146101da575f80fd5b80627587e0146100eb5780630be3bdec146100fe5780631adae90b1461010c57806328ee40781461011e57806342ce4e2a1461012c578063488dab591461013a57806364664d131461014857806383fb796814610156575b5f80fd5b6100fc6100f936600461036b565b50565b005b6100fc6100f9366004610496565b6100fc61011a36600461053e565b5050565b6100fc6100f9366004610567565b6100fc6100f93660046105e4565b6100fc6100f936600461068e565b6100fc6100f9366004610711565b6100fc6100f93660046107a0565b6100fc610172366004610828565b50505050565b6100fc6101723660046108f5565b6100fc610172366004610994565b6100fc61011a366004610a68565b6100fc6100f9366004610aab565b6100fc6100f9366004610ac2565b6100fc6100f9366004610af3565b6100fc6100f9366004610b8a565b6100fc6100f9366004610c27565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561021e5761021e6101e8565b60405290565b604051606081016001600160401b038111828210171561021e5761021e6101e8565b604051601f8201601f191681016001600160401b038111828210171561026e5761026e6101e8565b604052919050565b5f82601f830112610285575f80fd5b81356001600160401b0381111561029e5761029e6101e8565b6102b1601f8201601f1916602001610246565b8181528460208386010111156102c5575f80fd5b816020850160208301375f918101602001919091529392505050565b5f6001600160401b038211156102f9576102f96101e8565b5060051b60200190565b5f82601f830112610312575f80fd5b81356020610327610322836102e1565b610246565b82815260059290921b84018101918181019086841115610345575f80fd5b8286015b848110156103605780358352918301918301610349565b509695505050505050565b5f6020828403121561037b575f80fd5b81356001600160401b0380821115610391575f80fd5b90830190608082860312156103a4575f80fd5b6103ac6101fc565b8235828111156103ba575f80fd5b6103c687828601610276565b825250602083013560208201526040830135828111156103e4575f80fd5b6103f087828601610276565b604083015250606083013582811115610407575f80fd5b61041387828601610303565b60608301525095945050505050565b5f60608284031215610432575f80fd5b61043a610224565b905081356001600160401b0380821115610452575f80fd5b61045e85838601610276565b835260208401356020840152604084013591508082111561047d575f80fd5b5061048a84828501610303565b60408301525092915050565b5f602082840312156104a6575f80fd5b81356001600160401b038111156104bb575f80fd5b6104c784828501610422565b949350505050565b80356001600160a01b03811681146104e5575f80fd5b919050565b5f604082840312156104fa575f80fd5b604051604081018181106001600160401b038211171561051c5761051c6101e8565b60405282358152905080610532602084016104cf565b60208201525092915050565b5f806060838503121561054f575f80fd5b61055984846104ea565b946040939093013593505050565b5f60208284031215610577575f80fd5b81356001600160401b038082111561058d575f80fd5b90830190602082860312156105a0575f80fd5b6040516020810181811083821117156105bb576105bb6101e8565b6040528235828111156105cc575f80fd5b6105d887828601610276565b82525095945050505050565b5f60208083850312156105f5575f80fd5b82356001600160401b038082111561060b575f80fd5b818501915085601f83011261061e575f80fd5b813561062c610322826102e1565b81815260059190911b8301840190848101908883111561064a575f80fd5b8585015b8381101561068157803585811115610665575f8081fd5b6106738b89838a0101610276565b84525091860191860161064e565b5098975050505050505050565b5f6020828403121561069e575f80fd5b81356001600160401b03808211156106b4575f80fd5b90830190608082860312156106c7575f80fd5b6106cf610224565b823581526020830135828111156106e4575f80fd5b6106f087828601610276565b60208301525061070386604085016104ea565b604082015295945050505050565b5f60208284031215610721575f80fd5b81356001600160e01b031981168114610738575f80fd5b9392505050565b5f82601f83011261074e575f80fd5b8135602061075e610322836102e1565b82815260069290921b8401810191818101908684111561077c575f80fd5b8286015b848110156103605761079288826104ea565b835291830191604001610780565b5f602082840312156107b0575f80fd5b81356001600160401b038111156107c5575f80fd5b6104c78482850161073f565b5f8083601f8401126107e1575f80fd5b5081356001600160401b038111156107f7575f80fd5b60208301915083602082850101111561080e575f80fd5b9250929050565b803563ffffffff811681146104e5575f80fd5b5f805f806060858703121561083b575f80fd5b610844856104cf565b93506020808601356001600160401b0380821115610860575f80fd5b61086c89838a016107d1565b90965094506040880135915080821115610884575f80fd5b508601601f81018813610895575f80fd5b80356108a3610322826102e1565b81815260059190911b8201830190838101908a8311156108c1575f80fd5b928401925b828410156108e6576108d784610815565b825292840192908401906108c6565b979a9699509497505050505050565b5f805f8060608587031215610908575f80fd5b84356001600160401b038082111561091e575f80fd5b818701915087601f830112610931575f80fd5b81358181111561093f575f80fd5b8860208260051b8501011115610953575f80fd5b60209283019650945090860135908082111561096d575f80fd5b5061097a87828801610276565b92505061098960408601610815565b905092959194509250565b5f805f80606085870312156109a7575f80fd5b84356001600160401b03808211156109bd575f80fd5b6109c9888389016107d1565b9096509450602091508682013580151581146109e3575f80fd5b93506040870135818111156109f6575f80fd5b87019050601f81018813610a08575f80fd5b8035610a16610322826102e1565b81815260059190911b8201830190838101908a831115610a34575f80fd5b928401925b828410156108e65783356001600160f01b031981168114610a59575f8081fd5b82529284019290840190610a39565b5f8060408385031215610a79575f80fd5b8235915060208301356001600160401b03811115610a95575f80fd5b610aa185828601610276565b9150509250929050565b5f60208284031215610abb575f80fd5b5035919050565b5f60208284031215610ad2575f80fd5b81356001600160401b03811115610ae7575f80fd5b6104c784828501610276565b5f60208284031215610b03575f80fd5b81356001600160401b0380821115610b19575f80fd5b9083019060a08286031215610b2c575f80fd5b610b346101fc565b823582811115610b42575f80fd5b610b4e87828601610276565b825250610b5e86602085016104ea565b602082015260608301356040820152608083013582811115610b7e575f80fd5b61041387828601610422565b5f6020808385031215610b9b575f80fd5b82356001600160401b0380821115610bb1575f80fd5b818501915085601f830112610bc4575f80fd5b8135610bd2610322826102e1565b81815260059190911b83018401908481019088831115610bf0575f80fd5b8585015b8381101561068157803585811115610c0b575f8081fd5b610c198b89838a0101610422565b845250918601918601610bf4565b5f60208284031215610c37575f80fd5b81356001600160401b0380821115610c4d575f80fd5b9083019060608286031215610c60575f80fd5b610c68610224565b82358152602083013582811115610c7d575f80fd5b610c8987828601610276565b602083015250604083013582811115610ca0575f80fd5b610cac8782860161073f565b6040830152509594505050505056fea2646970667358221220d4620e99df167f83d20493b90001f443cb375acca0240c5ca340a959301fa9ab64736f6c63430008150033";

type TestEncoderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestEncoderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestEncoder__factory extends ContractFactory {
  constructor(...args: TestEncoderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestEncoder> {
    return super.deploy(overrides || {}) as Promise<TestEncoder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestEncoder {
    return super.attach(address) as TestEncoder;
  }
  override connect(signer: Signer): TestEncoder__factory {
    return super.connect(signer) as TestEncoder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestEncoderInterface {
    return new utils.Interface(_abi) as TestEncoderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestEncoder {
    return new Contract(address, _abi, signerOrProvider) as TestEncoder;
  }
}
