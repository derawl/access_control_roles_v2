/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MultiSend,
  MultiSendInterface,
} from "../../../contracts/test/MultiSend";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561000f575f80fd5b503060805260805161024361002b5f395f604001526102435ff3fe60806040526004361061001d575f3560e01c80638d80ff0a14610021575b5f80fd5b61003461002f366004610162565b610036565b005b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036100cb5760405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b606482015260840160405180910390fd5b805160205b81811015610149578083015160f81c6001820184015160601c60158301850151603584018601516055850187015f855f811461011357600181146101225761012c565b5f808585888a5af1915061012c565b5f808585895af491505b5080610136575f80fd5b50508060550185019450505050506100d0565b505050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610172575f80fd5b813567ffffffffffffffff80821115610189575f80fd5b818401915084601f83011261019c575f80fd5b8135818111156101ae576101ae61014e565b604051601f8201601f19908116603f011681019083821181831017156101d6576101d661014e565b816040528281528760208487010111156101ee575f80fd5b826020860160208301375f92810160200192909252509594505050505056fea26469706673582212203cdf34c70620cba2ec912a08cc08de96d34a8a534ea1394f4d896621a13817ff64736f6c63430008150033";

type MultiSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSend__factory extends ContractFactory {
  constructor(...args: MultiSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiSend> {
    return super.deploy(overrides || {}) as Promise<MultiSend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiSend {
    return super.attach(address) as MultiSend;
  }
  override connect(signer: Signer): MultiSend__factory {
    return super.connect(signer) as MultiSend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSendInterface {
    return new utils.Interface(_abi) as MultiSendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSend {
    return new Contract(address, _abi, signerOrProvider) as MultiSend;
  }
}
