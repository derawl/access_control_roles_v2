/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICustomCondition,
  ICustomConditionInterface,
} from "../../../../contracts/adapters/Types.sol/ICustomCondition";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "location",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        internalType: "bytes12",
        name: "extra",
        type: "bytes12",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "reason",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICustomCondition__factory {
  static readonly abi = _abi;
  static createInterface(): ICustomConditionInterface {
    return new utils.Interface(_abi) as ICustomConditionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICustomCondition {
    return new Contract(address, _abi, signerOrProvider) as ICustomCondition;
  }
}
