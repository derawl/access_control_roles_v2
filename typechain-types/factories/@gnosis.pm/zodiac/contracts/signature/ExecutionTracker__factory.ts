/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ExecutionTracker,
  ExecutionTrackerInterface,
} from "../../../../../@gnosis.pm/zodiac/contracts/signature/ExecutionTracker";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "HashAlreadyConsumed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "HashExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "HashInvalidated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "consumed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "invalidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506101638061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806369ecc3cf14610038578063e29dfba81461004d575b5f80fd5b61004b6100463660046100e1565b61008b565b005b61007761005b3660046100f8565b5f60208181529281526040808220909352908152205460ff1681565b604051901515815260200160405180910390f35b335f90815260208181526040808320848452825291829020805460ff1916600117905590518281527f89a77869d7b8125ba16e08a92ddc8cc26fb1fa47241971167954489a5e66c255910160405180910390a150565b5f602082840312156100f1575f80fd5b5035919050565b5f8060408385031215610109575f80fd5b82356001600160a01b038116811461011f575f80fd5b94602093909301359350505056fea2646970667358221220dd62c39b15e4586452cea2199c02818a4127c354feed9561133942715249831f64736f6c63430008150033";

type ExecutionTrackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExecutionTrackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExecutionTracker__factory extends ContractFactory {
  constructor(...args: ExecutionTrackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExecutionTracker> {
    return super.deploy(overrides || {}) as Promise<ExecutionTracker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExecutionTracker {
    return super.attach(address) as ExecutionTracker;
  }
  override connect(signer: Signer): ExecutionTracker__factory {
    return super.connect(signer) as ExecutionTracker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExecutionTrackerInterface {
    return new utils.Interface(_abi) as ExecutionTrackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExecutionTracker {
    return new Contract(address, _abi, signerOrProvider) as ExecutionTracker;
  }
}
