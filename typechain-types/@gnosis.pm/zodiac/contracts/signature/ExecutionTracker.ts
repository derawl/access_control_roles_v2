/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ExecutionTrackerInterface extends utils.Interface {
  functions: {
    "consumed(address,bytes32)": FunctionFragment;
    "invalidate(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "consumed" | "invalidate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consumed",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidate",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invalidate", data: BytesLike): Result;

  events: {
    "HashExecuted(bytes32)": EventFragment;
    "HashInvalidated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HashExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HashInvalidated"): EventFragment;
}

export interface HashExecutedEventObject {
  arg0: string;
}
export type HashExecutedEvent = TypedEvent<[string], HashExecutedEventObject>;

export type HashExecutedEventFilter = TypedEventFilter<HashExecutedEvent>;

export interface HashInvalidatedEventObject {
  arg0: string;
}
export type HashInvalidatedEvent = TypedEvent<
  [string],
  HashInvalidatedEventObject
>;

export type HashInvalidatedEventFilter = TypedEventFilter<HashInvalidatedEvent>;

export interface ExecutionTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExecutionTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consumed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invalidate(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  consumed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invalidate(
    hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    consumed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invalidate(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HashExecuted(bytes32)"(arg0?: null): HashExecutedEventFilter;
    HashExecuted(arg0?: null): HashExecutedEventFilter;

    "HashInvalidated(bytes32)"(arg0?: null): HashInvalidatedEventFilter;
    HashInvalidated(arg0?: null): HashInvalidatedEventFilter;
  };

  estimateGas: {
    consumed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidate(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidate(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
