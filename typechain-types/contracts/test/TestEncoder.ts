/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace TestEncoder {
  export type _DynamicTupleStruct = { dynamic: PromiseOrValue<BytesLike> };

  export type _DynamicTupleStructOutput = [string] & { dynamic: string };

  export type DynamicTupleStruct = {
    dynamic: PromiseOrValue<BytesLike>;
    _static: PromiseOrValue<BigNumberish>;
    dynamic32: PromiseOrValue<BigNumberish>[];
  };

  export type DynamicTupleStructOutput = [string, BigNumber, BigNumber[]] & {
    dynamic: string;
    _static: BigNumber;
    dynamic32: BigNumber[];
  };

  export type StaticTupleStruct = {
    a: PromiseOrValue<BigNumberish>;
    b: PromiseOrValue<string>;
  };

  export type StaticTupleStructOutput = [BigNumber, string] & {
    a: BigNumber;
    b: string;
  };

  export type DynamicTupleWithArrayStruct = {
    a: PromiseOrValue<BigNumberish>;
    b: PromiseOrValue<BytesLike>;
    c: TestEncoder.StaticTupleStruct[];
  };

  export type DynamicTupleWithArrayStructOutput = [
    BigNumber,
    string,
    TestEncoder.StaticTupleStructOutput[]
  ] & { a: BigNumber; b: string; c: TestEncoder.StaticTupleStructOutput[] };

  export type DynamicTupleWithDynamicTupleStruct = {
    a: PromiseOrValue<BytesLike>;
    b: TestEncoder.StaticTupleStruct;
    c: PromiseOrValue<BigNumberish>;
    d: TestEncoder.DynamicTupleStruct;
  };

  export type DynamicTupleWithDynamicTupleStructOutput = [
    string,
    TestEncoder.StaticTupleStructOutput,
    BigNumber,
    TestEncoder.DynamicTupleStructOutput
  ] & {
    a: string;
    b: TestEncoder.StaticTupleStructOutput;
    c: BigNumber;
    d: TestEncoder.DynamicTupleStructOutput;
  };

  export type DynamicTupleWithStaticTupleStruct = {
    a: PromiseOrValue<BigNumberish>;
    b: PromiseOrValue<BytesLike>;
    c: TestEncoder.StaticTupleStruct;
  };

  export type DynamicTupleWithStaticTupleStructOutput = [
    BigNumber,
    string,
    TestEncoder.StaticTupleStructOutput
  ] & { a: BigNumber; b: string; c: TestEncoder.StaticTupleStructOutput };

  export type MultiDynamicTupleStruct = {
    a: PromiseOrValue<BytesLike>;
    b: PromiseOrValue<BigNumberish>;
    c: PromiseOrValue<BytesLike>;
    d: PromiseOrValue<BigNumberish>[];
  };

  export type MultiDynamicTupleStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber[]
  ] & { a: string; b: BigNumber; c: string; d: BigNumber[] };
}

export interface TestEncoderInterface extends utils.Interface {
  functions: {
    "_dynamicTuple((bytes))": FunctionFragment;
    "arrayDynamicTupleItems((bytes,uint256,uint256[])[])": FunctionFragment;
    "arrayStaticTupleItems((uint256,address)[])": FunctionFragment;
    "dynamic(bytes)": FunctionFragment;
    "dynamic32DynamicStatic(bytes2[],string,uint32)": FunctionFragment;
    "dynamicArray(bytes[])": FunctionFragment;
    "dynamicStaticDynamic32(bytes,bool,bytes2[])": FunctionFragment;
    "dynamicTuple((bytes,uint256,uint256[]))": FunctionFragment;
    "dynamicTupleWithNestedArray((uint256,bytes,(uint256,address)[]))": FunctionFragment;
    "dynamicTupleWithNestedDynamicTuple((bytes,(uint256,address),uint256,(bytes,uint256,uint256[])))": FunctionFragment;
    "dynamicTupleWithNestedStaticTuple((uint256,bytes,(uint256,address)))": FunctionFragment;
    "multiDynamicTuple((bytes,uint256,bytes,uint256[]))": FunctionFragment;
    "simple(uint256)": FunctionFragment;
    "staticDynamic(uint256,bytes)": FunctionFragment;
    "staticDynamicDynamic32(address,bytes,uint32[])": FunctionFragment;
    "staticFn(bytes4)": FunctionFragment;
    "staticTuple((uint256,address),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_dynamicTuple"
      | "arrayDynamicTupleItems"
      | "arrayStaticTupleItems"
      | "dynamic"
      | "dynamic32DynamicStatic"
      | "dynamicArray"
      | "dynamicStaticDynamic32"
      | "dynamicTuple"
      | "dynamicTupleWithNestedArray"
      | "dynamicTupleWithNestedDynamicTuple"
      | "dynamicTupleWithNestedStaticTuple"
      | "multiDynamicTuple"
      | "simple"
      | "staticDynamic"
      | "staticDynamicDynamic32"
      | "staticFn"
      | "staticTuple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_dynamicTuple",
    values: [TestEncoder._DynamicTupleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "arrayDynamicTupleItems",
    values: [TestEncoder.DynamicTupleStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "arrayStaticTupleItems",
    values: [TestEncoder.StaticTupleStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamic",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamic32DynamicStatic",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicArray",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicStaticDynamic32",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicTuple",
    values: [TestEncoder.DynamicTupleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicTupleWithNestedArray",
    values: [TestEncoder.DynamicTupleWithArrayStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicTupleWithNestedDynamicTuple",
    values: [TestEncoder.DynamicTupleWithDynamicTupleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicTupleWithNestedStaticTuple",
    values: [TestEncoder.DynamicTupleWithStaticTupleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multiDynamicTuple",
    values: [TestEncoder.MultiDynamicTupleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simple",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "staticDynamic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "staticDynamicDynamic32",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "staticFn",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "staticTuple",
    values: [TestEncoder.StaticTupleStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_dynamicTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arrayDynamicTupleItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arrayStaticTupleItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dynamic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynamic32DynamicStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicStaticDynamic32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTupleWithNestedArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTupleWithNestedDynamicTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicTupleWithNestedStaticTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiDynamicTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simple", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "staticDynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticDynamicDynamic32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staticFn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "staticTuple",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestEncoder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestEncoderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _dynamicTuple(
      arg0: TestEncoder._DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arrayDynamicTupleItems(
      arg0: TestEncoder.DynamicTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arrayStaticTupleItems(
      arg0: TestEncoder.StaticTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamic32DynamicStatic(
      arg0: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicArray(
      arg0: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicStaticDynamic32(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<boolean>,
      arg2: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicTuple(
      arg0: TestEncoder.DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicTupleWithNestedArray(
      arg0: TestEncoder.DynamicTupleWithArrayStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicTupleWithNestedDynamicTuple(
      arg0: TestEncoder.DynamicTupleWithDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dynamicTupleWithNestedStaticTuple(
      arg0: TestEncoder.DynamicTupleWithStaticTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiDynamicTuple(
      arg0: TestEncoder.MultiDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simple(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staticDynamic(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staticDynamicDynamic32(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staticFn(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staticTuple(
      arg0: TestEncoder.StaticTupleStruct,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _dynamicTuple(
    arg0: TestEncoder._DynamicTupleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arrayDynamicTupleItems(
    arg0: TestEncoder.DynamicTupleStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arrayStaticTupleItems(
    arg0: TestEncoder.StaticTupleStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamic(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamic32DynamicStatic(
    arg0: PromiseOrValue<BytesLike>[],
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicArray(
    arg0: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicStaticDynamic32(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<boolean>,
    arg2: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicTuple(
    arg0: TestEncoder.DynamicTupleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicTupleWithNestedArray(
    arg0: TestEncoder.DynamicTupleWithArrayStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicTupleWithNestedDynamicTuple(
    arg0: TestEncoder.DynamicTupleWithDynamicTupleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dynamicTupleWithNestedStaticTuple(
    arg0: TestEncoder.DynamicTupleWithStaticTupleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiDynamicTuple(
    arg0: TestEncoder.MultiDynamicTupleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simple(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staticDynamic(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staticDynamicDynamic32(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staticFn(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staticTuple(
    arg0: TestEncoder.StaticTupleStruct,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _dynamicTuple(
      arg0: TestEncoder._DynamicTupleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    arrayDynamicTupleItems(
      arg0: TestEncoder.DynamicTupleStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    arrayStaticTupleItems(
      arg0: TestEncoder.StaticTupleStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    dynamic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dynamic32DynamicStatic(
      arg0: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicArray(
      arg0: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicStaticDynamic32(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<boolean>,
      arg2: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicTuple(
      arg0: TestEncoder.DynamicTupleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicTupleWithNestedArray(
      arg0: TestEncoder.DynamicTupleWithArrayStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicTupleWithNestedDynamicTuple(
      arg0: TestEncoder.DynamicTupleWithDynamicTupleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dynamicTupleWithNestedStaticTuple(
      arg0: TestEncoder.DynamicTupleWithStaticTupleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multiDynamicTuple(
      arg0: TestEncoder.MultiDynamicTupleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    simple(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    staticDynamic(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    staticDynamicDynamic32(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    staticFn(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    staticTuple(
      arg0: TestEncoder.StaticTupleStruct,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _dynamicTuple(
      arg0: TestEncoder._DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arrayDynamicTupleItems(
      arg0: TestEncoder.DynamicTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arrayStaticTupleItems(
      arg0: TestEncoder.StaticTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamic32DynamicStatic(
      arg0: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicArray(
      arg0: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicStaticDynamic32(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<boolean>,
      arg2: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicTuple(
      arg0: TestEncoder.DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicTupleWithNestedArray(
      arg0: TestEncoder.DynamicTupleWithArrayStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicTupleWithNestedDynamicTuple(
      arg0: TestEncoder.DynamicTupleWithDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dynamicTupleWithNestedStaticTuple(
      arg0: TestEncoder.DynamicTupleWithStaticTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiDynamicTuple(
      arg0: TestEncoder.MultiDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simple(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staticDynamic(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staticDynamicDynamic32(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staticFn(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staticTuple(
      arg0: TestEncoder.StaticTupleStruct,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dynamicTuple(
      arg0: TestEncoder._DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arrayDynamicTupleItems(
      arg0: TestEncoder.DynamicTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arrayStaticTupleItems(
      arg0: TestEncoder.StaticTupleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamic(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamic32DynamicStatic(
      arg0: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicArray(
      arg0: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicStaticDynamic32(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<boolean>,
      arg2: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicTuple(
      arg0: TestEncoder.DynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicTupleWithNestedArray(
      arg0: TestEncoder.DynamicTupleWithArrayStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicTupleWithNestedDynamicTuple(
      arg0: TestEncoder.DynamicTupleWithDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dynamicTupleWithNestedStaticTuple(
      arg0: TestEncoder.DynamicTupleWithStaticTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiDynamicTuple(
      arg0: TestEncoder.MultiDynamicTupleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simple(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staticDynamic(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staticDynamicDynamic32(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staticFn(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staticTuple(
      arg0: TestEncoder.StaticTupleStruct,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
