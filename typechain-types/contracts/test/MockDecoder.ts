/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MockDecoder {
  export type IN10Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
  };

  export type IN10StructOutput = [number, number] & {
    paramType: number;
    operator: number;
  };

  export type IN9Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN10Struct[];
  };

  export type IN9StructOutput = [
    number,
    number,
    MockDecoder.IN10StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN10StructOutput[];
  };

  export type IN8Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN9Struct[];
  };

  export type IN8StructOutput = [
    number,
    number,
    MockDecoder.IN9StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN9StructOutput[];
  };

  export type IN7Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN8Struct[];
  };

  export type IN7StructOutput = [
    number,
    number,
    MockDecoder.IN8StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN8StructOutput[];
  };

  export type IN6Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN7Struct[];
  };

  export type IN6StructOutput = [
    number,
    number,
    MockDecoder.IN7StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN7StructOutput[];
  };

  export type IN5Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN6Struct[];
  };

  export type IN5StructOutput = [
    number,
    number,
    MockDecoder.IN6StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN6StructOutput[];
  };

  export type IN4Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN5Struct[];
  };

  export type IN4StructOutput = [
    number,
    number,
    MockDecoder.IN5StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN5StructOutput[];
  };

  export type IN3Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN4Struct[];
  };

  export type IN3StructOutput = [
    number,
    number,
    MockDecoder.IN4StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN4StructOutput[];
  };

  export type IN2Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN3Struct[];
  };

  export type IN2StructOutput = [
    number,
    number,
    MockDecoder.IN3StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN3StructOutput[];
  };

  export type IN1Struct = {
    paramType: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    children: MockDecoder.IN2Struct[];
  };

  export type IN1StructOutput = [
    number,
    number,
    MockDecoder.IN2StructOutput[]
  ] & {
    paramType: number;
    operator: number;
    children: MockDecoder.IN2StructOutput[];
  };

  export type PP6Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
  };

  export type PP6StructOutput = [BigNumber, BigNumber] & {
    location: BigNumber;
    size: BigNumber;
  };

  export type PP5Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    children: MockDecoder.PP6Struct[];
  };

  export type PP5StructOutput = [
    BigNumber,
    BigNumber,
    MockDecoder.PP6StructOutput[]
  ] & {
    location: BigNumber;
    size: BigNumber;
    children: MockDecoder.PP6StructOutput[];
  };

  export type PP4Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    children: MockDecoder.PP5Struct[];
  };

  export type PP4StructOutput = [
    BigNumber,
    BigNumber,
    MockDecoder.PP5StructOutput[]
  ] & {
    location: BigNumber;
    size: BigNumber;
    children: MockDecoder.PP5StructOutput[];
  };

  export type PP3Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    children: MockDecoder.PP4Struct[];
  };

  export type PP3StructOutput = [
    BigNumber,
    BigNumber,
    MockDecoder.PP4StructOutput[]
  ] & {
    location: BigNumber;
    size: BigNumber;
    children: MockDecoder.PP4StructOutput[];
  };

  export type PP2Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    children: MockDecoder.PP3Struct[];
  };

  export type PP2StructOutput = [
    BigNumber,
    BigNumber,
    MockDecoder.PP3StructOutput[]
  ] & {
    location: BigNumber;
    size: BigNumber;
    children: MockDecoder.PP3StructOutput[];
  };

  export type PP1Struct = {
    location: PromiseOrValue<BigNumberish>;
    size: PromiseOrValue<BigNumberish>;
    children: MockDecoder.PP2Struct[];
  };

  export type PP1StructOutput = [
    BigNumber,
    BigNumber,
    MockDecoder.PP2StructOutput[]
  ] & {
    location: BigNumber;
    size: BigNumber;
    children: MockDecoder.PP2StructOutput[];
  };
}

export interface MockDecoderInterface extends utils.Interface {
  functions: {
    "inspect(bytes,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8,(uint8,uint8)[])[])[])[])[])[])[])[])[]))": FunctionFragment;
    "pluck(bytes,uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "inspect" | "pluck"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "inspect",
    values: [PromiseOrValue<BytesLike>, MockDecoder.IN1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "pluck",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "inspect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pluck", data: BytesLike): Result;

  events: {};
}

export interface MockDecoder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockDecoderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    inspect(
      data: PromiseOrValue<BytesLike>,
      layout: MockDecoder.IN1Struct,
      overrides?: CallOverrides
    ): Promise<[MockDecoder.PP1StructOutput]>;

    pluck(
      data: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;
  };

  inspect(
    data: PromiseOrValue<BytesLike>,
    layout: MockDecoder.IN1Struct,
    overrides?: CallOverrides
  ): Promise<MockDecoder.PP1StructOutput>;

  pluck(
    data: PromiseOrValue<BytesLike>,
    offset: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    inspect(
      data: PromiseOrValue<BytesLike>,
      layout: MockDecoder.IN1Struct,
      overrides?: CallOverrides
    ): Promise<MockDecoder.PP1StructOutput>;

    pluck(
      data: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    inspect(
      data: PromiseOrValue<BytesLike>,
      layout: MockDecoder.IN1Struct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluck(
      data: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    inspect(
      data: PromiseOrValue<BytesLike>,
      layout: MockDecoder.IN1Struct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluck(
      data: PromiseOrValue<BytesLike>,
      offset: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
