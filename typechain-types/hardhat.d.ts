/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Modifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Modifier__factory>;
    getContractFactory(
      name: "Module",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Module__factory>;
    getContractFactory(
      name: "FactoryFriendly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryFriendly__factory>;
    getContractFactory(
      name: "ModuleProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleProxyFactory__factory>;
    getContractFactory(
      name: "IAvatar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAvatar__factory>;
    getContractFactory(
      name: "ExecutionTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutionTracker__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "SignatureChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureChecker__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "AvatarIsOwnerOfERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvatarIsOwnerOfERC721__factory>;
    getContractFactory(
      name: "IModifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModifier__factory>;
    getContractFactory(
      name: "MultiSendUnwrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSendUnwrapper__factory>;
    getContractFactory(
      name: "ICustomCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICustomCondition__factory>;
    getContractFactory(
      name: "IMultiSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiSend__factory>;
    getContractFactory(
      name: "ITransactionUnwrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransactionUnwrapper__factory>;
    getContractFactory(
      name: "AllowanceTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowanceTracker__factory>;
    getContractFactory(
      name: "Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Core__factory>;
    getContractFactory(
      name: "Decoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Decoder__factory>;
    getContractFactory(
      name: "Integrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Integrity__factory>;
    getContractFactory(
      name: "Packer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Packer__factory>;
    getContractFactory(
      name: "Periphery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Periphery__factory>;
    getContractFactory(
      name: "PermissionBuilder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionBuilder__factory>;
    getContractFactory(
      name: "PermissionChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionChecker__factory>;
    getContractFactory(
      name: "PermissionLoader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionLoader__factory>;
    getContractFactory(
      name: "Roles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Roles__factory>;
    getContractFactory(
      name: "MockConsumptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockConsumptions__factory>;
    getContractFactory(
      name: "MockDecoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDecoder__factory>;
    getContractFactory(
      name: "MockERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC721__factory>;
    getContractFactory(
      name: "MockIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockIntegrity__factory>;
    getContractFactory(
      name: "MultiSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSend__factory>;
    getContractFactory(
      name: "TestAvatar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAvatar__factory>;
    getContractFactory(
      name: "TestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestContract__factory>;
    getContractFactory(
      name: "TestCustomChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCustomChecker__factory>;
    getContractFactory(
      name: "TestEncoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEncoder__factory>;
    getContractFactory(
      name: "ISingletonFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISingletonFactory__factory>;
    getContractFactory(
      name: "WriteOnce",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WriteOnce__factory>;

    getContractAt(
      name: "Modifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Modifier>;
    getContractAt(
      name: "Module",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Module>;
    getContractAt(
      name: "FactoryFriendly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryFriendly>;
    getContractAt(
      name: "ModuleProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleProxyFactory>;
    getContractAt(
      name: "IAvatar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAvatar>;
    getContractAt(
      name: "ExecutionTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutionTracker>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "SignatureChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureChecker>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "Strings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "AvatarIsOwnerOfERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvatarIsOwnerOfERC721>;
    getContractAt(
      name: "IModifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModifier>;
    getContractAt(
      name: "MultiSendUnwrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSendUnwrapper>;
    getContractAt(
      name: "ICustomCondition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICustomCondition>;
    getContractAt(
      name: "IMultiSend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiSend>;
    getContractAt(
      name: "ITransactionUnwrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransactionUnwrapper>;
    getContractAt(
      name: "AllowanceTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowanceTracker>;
    getContractAt(
      name: "Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Core>;
    getContractAt(
      name: "Decoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Decoder>;
    getContractAt(
      name: "Integrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Integrity>;
    getContractAt(
      name: "Packer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Packer>;
    getContractAt(
      name: "Periphery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Periphery>;
    getContractAt(
      name: "PermissionBuilder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionBuilder>;
    getContractAt(
      name: "PermissionChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionChecker>;
    getContractAt(
      name: "PermissionLoader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionLoader>;
    getContractAt(
      name: "Roles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Roles>;
    getContractAt(
      name: "MockConsumptions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockConsumptions>;
    getContractAt(
      name: "MockDecoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDecoder>;
    getContractAt(
      name: "MockERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC721>;
    getContractAt(
      name: "MockIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockIntegrity>;
    getContractAt(
      name: "MultiSend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSend>;
    getContractAt(
      name: "TestAvatar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAvatar>;
    getContractAt(
      name: "TestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestContract>;
    getContractAt(
      name: "TestCustomChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCustomChecker>;
    getContractAt(
      name: "TestEncoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEncoder>;
    getContractAt(
      name: "ISingletonFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISingletonFactory>;
    getContractAt(
      name: "WriteOnce",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WriteOnce>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
